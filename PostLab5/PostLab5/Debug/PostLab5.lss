
PostLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000836  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000008aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bce  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088d  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059d  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000510  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 19 04 	jmp	0x832	; 0x832 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
		dutyCycle = map(adcValue3, 0, 1023, 0, 100);
		PWM0_dcb(dutyCycle, NO_INVERTING);
    }
}
void ADC_init(void){
	ADMUX |= (1<<REFS0);	// VCC REF
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<ADLAR);	// 10 bits
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24
	// PRESCALER 128 > 16M/128 = 125KHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);	// ADC ON
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <adcRead>:
}
uint16_t adcRead(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;	// selección de canal		
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	89 2b       	or	r24, r25
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);	// inicia conversión
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));	// hasta finalizar conversión
  ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d2:	86 fd       	sbrc	r24, 6
  d4:	fc cf       	rjmp	.-8      	; 0xce <adcRead+0x16>
	return(ADC);	
  d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  de:	08 95       	ret

000000e0 <main>:



int main(void)
{
	DDRD = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	8a b9       	out	0x0a, r24	; 10
	ADC_init();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PWM_init();
  e8:	0e 94 09 01 	call	0x212	; 0x212 <PWM_init>
	PWM0_init();
  ec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <PWM0_init>
    while (1) 
    {
		adcValue1 = adcRead(0);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
  f6:	bc 01       	movw	r22, r24
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__floatunsisf>
 100:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <adcValue1>
 104:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <adcValue1+0x1>
 108:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adcValue1+0x2>
 10c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <adcValue1+0x3>
		servo_writeA(adcValue1);
 110:	0e 94 84 01 	call	0x308	; 0x308 <servo_writeA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9c e9       	ldi	r25, 0x9C	; 156
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x38>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x3e>
 11e:	00 00       	nop
		_delay_ms(10);
		adcValue2 = adcRead(1);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 126:	bc 01       	movw	r22, r24
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__floatunsisf>
 130:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <adcValue2>
 134:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <adcValue2+0x1>
 138:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <adcValue2+0x2>
 13c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <adcValue2+0x3>
		servo_writeB(adcValue2);
 140:	0e 94 b6 01 	call	0x36c	; 0x36c <servo_writeB>
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9c e9       	ldi	r25, 0x9C	; 156
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x68>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x6e>
 14e:	00 00       	nop
		_delay_ms(10);
		adcValue3 = adcRead(2);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 5c 00 	call	0xb8	; 0xb8 <adcRead>
 156:	bc 01       	movw	r22, r24
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__floatunsisf>
 160:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <adcValue3>
 164:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <adcValue3+0x1>
 168:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adcValue3+0x2>
 16c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adcValue3+0x3>
		dutyCycle = map(adcValue3, 0, 1023, 0, 100);
 170:	22 e4       	ldi	r18, 0x42	; 66
 172:	2f 93       	push	r18
 174:	28 ec       	ldi	r18, 0xC8	; 200
 176:	2f 93       	push	r18
 178:	1f 92       	push	r1
 17a:	1f 92       	push	r1
 17c:	a1 2c       	mov	r10, r1
 17e:	b1 2c       	mov	r11, r1
 180:	65 01       	movw	r12, r10
 182:	e1 2c       	mov	r14, r1
 184:	10 ec       	ldi	r17, 0xC0	; 192
 186:	f1 2e       	mov	r15, r17
 188:	0f e7       	ldi	r16, 0x7F	; 127
 18a:	14 e4       	ldi	r17, 0x44	; 68
 18c:	a6 01       	movw	r20, r12
 18e:	95 01       	movw	r18, r10
 190:	0e 94 25 01 	call	0x24a	; 0x24a <map>
 194:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 198:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		PWM0_dcb(dutyCycle, NO_INVERTING);
 1a4:	0e 94 c7 02 	call	0x58e	; 0x58e <__fixunssfsi>
 1a8:	86 2f       	mov	r24, r22
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <PWM0_dcb>
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	9b cf       	rjmp	.-202    	; 0xf0 <main+0x10>

000001ba <PWM0_init>:
	{
		TCCR0A |= (1<<COM0A1);
		TCCR0A |= (1<<COM0A0);
		
	}
	OCR0A = (dc * 255) / 100;
 1ba:	85 b5       	in	r24, 0x25	; 37
 1bc:	87 7f       	andi	r24, 0xF7	; 247
 1be:	85 bd       	out	0x25, r24	; 37
 1c0:	84 b5       	in	r24, 0x24	; 36
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	84 bd       	out	0x24, r24	; 36
 1c6:	84 b5       	in	r24, 0x24	; 36
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	84 bd       	out	0x24, r24	; 36
 1cc:	85 b5       	in	r24, 0x25	; 37
 1ce:	8b 7f       	andi	r24, 0xFB	; 251
 1d0:	85 bd       	out	0x25, r24	; 37
 1d2:	85 b5       	in	r24, 0x25	; 37
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	85 bd       	out	0x25, r24	; 37
 1d8:	85 b5       	in	r24, 0x25	; 37
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	85 bd       	out	0x25, r24	; 37
 1de:	08 95       	ret

000001e0 <PWM0_dcb>:
}

void PWM0_dcb(uint8_t dc, uint8_t modo)
{
	if(modo == 1)
 1e0:	61 30       	cpi	r22, 0x01	; 1
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <PWM0_dcb+0x12>
	{
		TCCR0A |= (1<<COM0B1);
 1e4:	94 b5       	in	r25, 0x24	; 36
 1e6:	90 62       	ori	r25, 0x20	; 32
 1e8:	94 bd       	out	0x24, r25	; 36
		TCCR0A &= ~(1<<COM0B0);
 1ea:	94 b5       	in	r25, 0x24	; 36
 1ec:	9f 7e       	andi	r25, 0xEF	; 239
 1ee:	94 bd       	out	0x24, r25	; 36
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <PWM0_dcb+0x1e>
	}
	else
	{
		TCCR0A |= (1<<COM0B1);
 1f2:	94 b5       	in	r25, 0x24	; 36
 1f4:	90 62       	ori	r25, 0x20	; 32
 1f6:	94 bd       	out	0x24, r25	; 36
		TCCR0A |= (1<<COM0B0);
 1f8:	94 b5       	in	r25, 0x24	; 36
 1fa:	90 61       	ori	r25, 0x10	; 16
 1fc:	94 bd       	out	0x24, r25	; 36
		
	}
	OCR0B = (dc * 255) / 100;
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	82 9f       	mul	r24, r18
 202:	c0 01       	movw	r24, r0
 204:	11 24       	eor	r1, r1
 206:	64 e6       	ldi	r22, 0x64	; 100
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
 20e:	68 bd       	out	0x28, r22	; 40
 210:	08 95       	ret

00000212 <PWM_init>:
#include "ServoControl.h"

void PWM_init(void){
	// PB1 | PB2
	DDRB |= ( 1<< PB1 )|(1<<PB2);
 212:	84 b1       	in	r24, 0x04	; 4
 214:	86 60       	ori	r24, 0x06	; 6
 216:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0; // reset
 218:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 21c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 39999; // TOP
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 228:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ; // low --> Compare Match
 22c:	e0 e8       	ldi	r30, 0x80	; 128
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 ea       	ldi	r24, 0xA0	; 160
 232:	80 83       	st	Z, r24
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM TOP ICR1
 234:	80 81       	ld	r24, Z
 236:	82 60       	ori	r24, 0x02	; 2
 238:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
 23a:	e1 e8       	ldi	r30, 0x81	; 129
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	88 e1       	ldi	r24, 0x18	; 24
 240:	80 83       	st	Z, r24
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <map>:
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
}
void servo_writeB(float adc_Value){
	OCR1B = map(adc_Value, 0, 1024, 1000, 4800);
}
float map(float x, float in_min, float in_max, float out_min, float out_max){
 24a:	4f 92       	push	r4
 24c:	5f 92       	push	r5
 24e:	6f 92       	push	r6
 250:	7f 92       	push	r7
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	28 97       	sbiw	r28, 0x08	; 8
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	29 01       	movw	r4, r18
 278:	3a 01       	movw	r6, r20
 27a:	ed 82       	std	Y+5, r14	; 0x05
 27c:	fe 82       	std	Y+6, r15	; 0x06
 27e:	0f 83       	std	Y+7, r16	; 0x07
 280:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 282:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__subsf3>
 286:	69 83       	std	Y+1, r22	; 0x01
 288:	7a 83       	std	Y+2, r23	; 0x02
 28a:	8b 83       	std	Y+3, r24	; 0x03
 28c:	9c 83       	std	Y+4, r25	; 0x04
 28e:	a6 01       	movw	r20, r12
 290:	95 01       	movw	r18, r10
 292:	69 8d       	ldd	r22, Y+25	; 0x19
 294:	7a 8d       	ldd	r23, Y+26	; 0x1a
 296:	8b 8d       	ldd	r24, Y+27	; 0x1b
 298:	9c 8d       	ldd	r25, Y+28	; 0x1c
 29a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__subsf3>
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	69 81       	ldd	r22, Y+1	; 0x01
 2a4:	7a 81       	ldd	r23, Y+2	; 0x02
 2a6:	8b 81       	ldd	r24, Y+3	; 0x03
 2a8:	9c 81       	ldd	r25, Y+4	; 0x04
 2aa:	0e 94 84 03 	call	0x708	; 0x708 <__mulsf3>
 2ae:	69 83       	std	Y+1, r22	; 0x01
 2b0:	7a 83       	std	Y+2, r23	; 0x02
 2b2:	8b 83       	std	Y+3, r24	; 0x03
 2b4:	9c 83       	std	Y+4, r25	; 0x04
 2b6:	a3 01       	movw	r20, r6
 2b8:	92 01       	movw	r18, r4
 2ba:	c8 01       	movw	r24, r16
 2bc:	b7 01       	movw	r22, r14
 2be:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__subsf3>
 2c2:	9b 01       	movw	r18, r22
 2c4:	ac 01       	movw	r20, r24
 2c6:	69 81       	ldd	r22, Y+1	; 0x01
 2c8:	7a 81       	ldd	r23, Y+2	; 0x02
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	9c 81       	ldd	r25, Y+4	; 0x04
 2ce:	0e 94 55 02 	call	0x4aa	; 0x4aa <__divsf3>
 2d2:	9b 01       	movw	r18, r22
 2d4:	ac 01       	movw	r20, r24
 2d6:	c6 01       	movw	r24, r12
 2d8:	b5 01       	movw	r22, r10
 2da:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__addsf3>
}
 2de:	28 96       	adiw	r28, 0x08	; 8
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	df 90       	pop	r13
 2f8:	cf 90       	pop	r12
 2fa:	bf 90       	pop	r11
 2fc:	af 90       	pop	r10
 2fe:	7f 90       	pop	r7
 300:	6f 90       	pop	r6
 302:	5f 90       	pop	r5
 304:	4f 90       	pop	r4
 306:	08 95       	ret

00000308 <servo_writeA>:
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ; // low --> Compare Match
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM TOP ICR1
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
}
void servo_writeA(float adc_Value){
 308:	af 92       	push	r10
 30a:	bf 92       	push	r11
 30c:	cf 92       	push	r12
 30e:	df 92       	push	r13
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
 318:	25 e4       	ldi	r18, 0x45	; 69
 31a:	2f 93       	push	r18
 31c:	26 e9       	ldi	r18, 0x96	; 150
 31e:	2f 93       	push	r18
 320:	1f 92       	push	r1
 322:	1f 92       	push	r1
 324:	0f 2e       	mov	r0, r31
 326:	a1 2c       	mov	r10, r1
 328:	b1 2c       	mov	r11, r1
 32a:	fa e7       	ldi	r31, 0x7A	; 122
 32c:	cf 2e       	mov	r12, r31
 32e:	f4 e4       	ldi	r31, 0x44	; 68
 330:	df 2e       	mov	r13, r31
 332:	f0 2d       	mov	r31, r0
 334:	e1 2c       	mov	r14, r1
 336:	f1 2c       	mov	r15, r1
 338:	00 e8       	ldi	r16, 0x80	; 128
 33a:	14 e4       	ldi	r17, 0x44	; 68
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	a9 01       	movw	r20, r18
 342:	0e 94 25 01 	call	0x24a	; 0x24a <map>
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0e 94 c7 02 	call	0x58e	; 0x58e <__fixunssfsi>
 352:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 356:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	bf 90       	pop	r11
 368:	af 90       	pop	r10
 36a:	08 95       	ret

0000036c <servo_writeB>:
void servo_writeB(float adc_Value){
 36c:	af 92       	push	r10
 36e:	bf 92       	push	r11
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
	OCR1B = map(adc_Value, 0, 1024, 1000, 4800);
 37c:	25 e4       	ldi	r18, 0x45	; 69
 37e:	2f 93       	push	r18
 380:	26 e9       	ldi	r18, 0x96	; 150
 382:	2f 93       	push	r18
 384:	1f 92       	push	r1
 386:	1f 92       	push	r1
 388:	0f 2e       	mov	r0, r31
 38a:	a1 2c       	mov	r10, r1
 38c:	b1 2c       	mov	r11, r1
 38e:	fa e7       	ldi	r31, 0x7A	; 122
 390:	cf 2e       	mov	r12, r31
 392:	f4 e4       	ldi	r31, 0x44	; 68
 394:	df 2e       	mov	r13, r31
 396:	f0 2d       	mov	r31, r0
 398:	e1 2c       	mov	r14, r1
 39a:	f1 2c       	mov	r15, r1
 39c:	00 e8       	ldi	r16, 0x80	; 128
 39e:	14 e4       	ldi	r17, 0x44	; 68
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	a9 01       	movw	r20, r18
 3a6:	0e 94 25 01 	call	0x24a	; 0x24a <map>
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0e 94 c7 02 	call	0x58e	; 0x58e <__fixunssfsi>
 3b6:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3ba:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	df 90       	pop	r13
 3c8:	cf 90       	pop	r12
 3ca:	bf 90       	pop	r11
 3cc:	af 90       	pop	r10
 3ce:	08 95       	ret

000003d0 <__subsf3>:
 3d0:	50 58       	subi	r21, 0x80	; 128

000003d2 <__addsf3>:
 3d2:	bb 27       	eor	r27, r27
 3d4:	aa 27       	eor	r26, r26
 3d6:	0e 94 00 02 	call	0x400	; 0x400 <__addsf3x>
 3da:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_round>
 3de:	0e 94 3c 03 	call	0x678	; 0x678 <__fp_pscA>
 3e2:	38 f0       	brcs	.+14     	; 0x3f2 <__addsf3+0x20>
 3e4:	0e 94 43 03 	call	0x686	; 0x686 <__fp_pscB>
 3e8:	20 f0       	brcs	.+8      	; 0x3f2 <__addsf3+0x20>
 3ea:	39 f4       	brne	.+14     	; 0x3fa <__addsf3+0x28>
 3ec:	9f 3f       	cpi	r25, 0xFF	; 255
 3ee:	19 f4       	brne	.+6      	; 0x3f6 <__addsf3+0x24>
 3f0:	26 f4       	brtc	.+8      	; 0x3fa <__addsf3+0x28>
 3f2:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_nan>
 3f6:	0e f4       	brtc	.+2      	; 0x3fa <__addsf3+0x28>
 3f8:	e0 95       	com	r30
 3fa:	e7 fb       	bst	r30, 7
 3fc:	0c 94 33 03 	jmp	0x666	; 0x666 <__fp_inf>

00000400 <__addsf3x>:
 400:	e9 2f       	mov	r30, r25
 402:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_split3>
 406:	58 f3       	brcs	.-42     	; 0x3de <__addsf3+0xc>
 408:	ba 17       	cp	r27, r26
 40a:	62 07       	cpc	r22, r18
 40c:	73 07       	cpc	r23, r19
 40e:	84 07       	cpc	r24, r20
 410:	95 07       	cpc	r25, r21
 412:	20 f0       	brcs	.+8      	; 0x41c <__addsf3x+0x1c>
 414:	79 f4       	brne	.+30     	; 0x434 <__addsf3x+0x34>
 416:	a6 f5       	brtc	.+104    	; 0x480 <__addsf3x+0x80>
 418:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_zero>
 41c:	0e f4       	brtc	.+2      	; 0x420 <__addsf3x+0x20>
 41e:	e0 95       	com	r30
 420:	0b 2e       	mov	r0, r27
 422:	ba 2f       	mov	r27, r26
 424:	a0 2d       	mov	r26, r0
 426:	0b 01       	movw	r0, r22
 428:	b9 01       	movw	r22, r18
 42a:	90 01       	movw	r18, r0
 42c:	0c 01       	movw	r0, r24
 42e:	ca 01       	movw	r24, r20
 430:	a0 01       	movw	r20, r0
 432:	11 24       	eor	r1, r1
 434:	ff 27       	eor	r31, r31
 436:	59 1b       	sub	r21, r25
 438:	99 f0       	breq	.+38     	; 0x460 <__addsf3x+0x60>
 43a:	59 3f       	cpi	r21, 0xF9	; 249
 43c:	50 f4       	brcc	.+20     	; 0x452 <__addsf3x+0x52>
 43e:	50 3e       	cpi	r21, 0xE0	; 224
 440:	68 f1       	brcs	.+90     	; 0x49c <__addsf3x+0x9c>
 442:	1a 16       	cp	r1, r26
 444:	f0 40       	sbci	r31, 0x00	; 0
 446:	a2 2f       	mov	r26, r18
 448:	23 2f       	mov	r18, r19
 44a:	34 2f       	mov	r19, r20
 44c:	44 27       	eor	r20, r20
 44e:	58 5f       	subi	r21, 0xF8	; 248
 450:	f3 cf       	rjmp	.-26     	; 0x438 <__addsf3x+0x38>
 452:	46 95       	lsr	r20
 454:	37 95       	ror	r19
 456:	27 95       	ror	r18
 458:	a7 95       	ror	r26
 45a:	f0 40       	sbci	r31, 0x00	; 0
 45c:	53 95       	inc	r21
 45e:	c9 f7       	brne	.-14     	; 0x452 <__addsf3x+0x52>
 460:	7e f4       	brtc	.+30     	; 0x480 <__addsf3x+0x80>
 462:	1f 16       	cp	r1, r31
 464:	ba 0b       	sbc	r27, r26
 466:	62 0b       	sbc	r22, r18
 468:	73 0b       	sbc	r23, r19
 46a:	84 0b       	sbc	r24, r20
 46c:	ba f0       	brmi	.+46     	; 0x49c <__addsf3x+0x9c>
 46e:	91 50       	subi	r25, 0x01	; 1
 470:	a1 f0       	breq	.+40     	; 0x49a <__addsf3x+0x9a>
 472:	ff 0f       	add	r31, r31
 474:	bb 1f       	adc	r27, r27
 476:	66 1f       	adc	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	c2 f7       	brpl	.-16     	; 0x46e <__addsf3x+0x6e>
 47e:	0e c0       	rjmp	.+28     	; 0x49c <__addsf3x+0x9c>
 480:	ba 0f       	add	r27, r26
 482:	62 1f       	adc	r22, r18
 484:	73 1f       	adc	r23, r19
 486:	84 1f       	adc	r24, r20
 488:	48 f4       	brcc	.+18     	; 0x49c <__addsf3x+0x9c>
 48a:	87 95       	ror	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f7 95       	ror	r31
 494:	9e 3f       	cpi	r25, 0xFE	; 254
 496:	08 f0       	brcs	.+2      	; 0x49a <__addsf3x+0x9a>
 498:	b0 cf       	rjmp	.-160    	; 0x3fa <__addsf3+0x28>
 49a:	93 95       	inc	r25
 49c:	88 0f       	add	r24, r24
 49e:	08 f0       	brcs	.+2      	; 0x4a2 <__addsf3x+0xa2>
 4a0:	99 27       	eor	r25, r25
 4a2:	ee 0f       	add	r30, r30
 4a4:	97 95       	ror	r25
 4a6:	87 95       	ror	r24
 4a8:	08 95       	ret

000004aa <__divsf3>:
 4aa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__divsf3x>
 4ae:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_round>
 4b2:	0e 94 43 03 	call	0x686	; 0x686 <__fp_pscB>
 4b6:	58 f0       	brcs	.+22     	; 0x4ce <__divsf3+0x24>
 4b8:	0e 94 3c 03 	call	0x678	; 0x678 <__fp_pscA>
 4bc:	40 f0       	brcs	.+16     	; 0x4ce <__divsf3+0x24>
 4be:	29 f4       	brne	.+10     	; 0x4ca <__divsf3+0x20>
 4c0:	5f 3f       	cpi	r21, 0xFF	; 255
 4c2:	29 f0       	breq	.+10     	; 0x4ce <__divsf3+0x24>
 4c4:	0c 94 33 03 	jmp	0x666	; 0x666 <__fp_inf>
 4c8:	51 11       	cpse	r21, r1
 4ca:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_szero>
 4ce:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_nan>

000004d2 <__divsf3x>:
 4d2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_split3>
 4d6:	68 f3       	brcs	.-38     	; 0x4b2 <__divsf3+0x8>

000004d8 <__divsf3_pse>:
 4d8:	99 23       	and	r25, r25
 4da:	b1 f3       	breq	.-20     	; 0x4c8 <__divsf3+0x1e>
 4dc:	55 23       	and	r21, r21
 4de:	91 f3       	breq	.-28     	; 0x4c4 <__divsf3+0x1a>
 4e0:	95 1b       	sub	r25, r21
 4e2:	55 0b       	sbc	r21, r21
 4e4:	bb 27       	eor	r27, r27
 4e6:	aa 27       	eor	r26, r26
 4e8:	62 17       	cp	r22, r18
 4ea:	73 07       	cpc	r23, r19
 4ec:	84 07       	cpc	r24, r20
 4ee:	38 f0       	brcs	.+14     	; 0x4fe <__divsf3_pse+0x26>
 4f0:	9f 5f       	subi	r25, 0xFF	; 255
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	22 0f       	add	r18, r18
 4f6:	33 1f       	adc	r19, r19
 4f8:	44 1f       	adc	r20, r20
 4fa:	aa 1f       	adc	r26, r26
 4fc:	a9 f3       	breq	.-22     	; 0x4e8 <__divsf3_pse+0x10>
 4fe:	35 d0       	rcall	.+106    	; 0x56a <__divsf3_pse+0x92>
 500:	0e 2e       	mov	r0, r30
 502:	3a f0       	brmi	.+14     	; 0x512 <__divsf3_pse+0x3a>
 504:	e0 e8       	ldi	r30, 0x80	; 128
 506:	32 d0       	rcall	.+100    	; 0x56c <__divsf3_pse+0x94>
 508:	91 50       	subi	r25, 0x01	; 1
 50a:	50 40       	sbci	r21, 0x00	; 0
 50c:	e6 95       	lsr	r30
 50e:	00 1c       	adc	r0, r0
 510:	ca f7       	brpl	.-14     	; 0x504 <__divsf3_pse+0x2c>
 512:	2b d0       	rcall	.+86     	; 0x56a <__divsf3_pse+0x92>
 514:	fe 2f       	mov	r31, r30
 516:	29 d0       	rcall	.+82     	; 0x56a <__divsf3_pse+0x92>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	88 1f       	adc	r24, r24
 51e:	bb 1f       	adc	r27, r27
 520:	26 17       	cp	r18, r22
 522:	37 07       	cpc	r19, r23
 524:	48 07       	cpc	r20, r24
 526:	ab 07       	cpc	r26, r27
 528:	b0 e8       	ldi	r27, 0x80	; 128
 52a:	09 f0       	breq	.+2      	; 0x52e <__divsf3_pse+0x56>
 52c:	bb 0b       	sbc	r27, r27
 52e:	80 2d       	mov	r24, r0
 530:	bf 01       	movw	r22, r30
 532:	ff 27       	eor	r31, r31
 534:	93 58       	subi	r25, 0x83	; 131
 536:	5f 4f       	sbci	r21, 0xFF	; 255
 538:	3a f0       	brmi	.+14     	; 0x548 <__divsf3_pse+0x70>
 53a:	9e 3f       	cpi	r25, 0xFE	; 254
 53c:	51 05       	cpc	r21, r1
 53e:	78 f0       	brcs	.+30     	; 0x55e <__divsf3_pse+0x86>
 540:	0c 94 33 03 	jmp	0x666	; 0x666 <__fp_inf>
 544:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_szero>
 548:	5f 3f       	cpi	r21, 0xFF	; 255
 54a:	e4 f3       	brlt	.-8      	; 0x544 <__divsf3_pse+0x6c>
 54c:	98 3e       	cpi	r25, 0xE8	; 232
 54e:	d4 f3       	brlt	.-12     	; 0x544 <__divsf3_pse+0x6c>
 550:	86 95       	lsr	r24
 552:	77 95       	ror	r23
 554:	67 95       	ror	r22
 556:	b7 95       	ror	r27
 558:	f7 95       	ror	r31
 55a:	9f 5f       	subi	r25, 0xFF	; 255
 55c:	c9 f7       	brne	.-14     	; 0x550 <__divsf3_pse+0x78>
 55e:	88 0f       	add	r24, r24
 560:	91 1d       	adc	r25, r1
 562:	96 95       	lsr	r25
 564:	87 95       	ror	r24
 566:	97 f9       	bld	r25, 7
 568:	08 95       	ret
 56a:	e1 e0       	ldi	r30, 0x01	; 1
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	88 1f       	adc	r24, r24
 572:	bb 1f       	adc	r27, r27
 574:	62 17       	cp	r22, r18
 576:	73 07       	cpc	r23, r19
 578:	84 07       	cpc	r24, r20
 57a:	ba 07       	cpc	r27, r26
 57c:	20 f0       	brcs	.+8      	; 0x586 <__divsf3_pse+0xae>
 57e:	62 1b       	sub	r22, r18
 580:	73 0b       	sbc	r23, r19
 582:	84 0b       	sbc	r24, r20
 584:	ba 0b       	sbc	r27, r26
 586:	ee 1f       	adc	r30, r30
 588:	88 f7       	brcc	.-30     	; 0x56c <__divsf3_pse+0x94>
 58a:	e0 95       	com	r30
 58c:	08 95       	ret

0000058e <__fixunssfsi>:
 58e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_splitA>
 592:	88 f0       	brcs	.+34     	; 0x5b6 <__fixunssfsi+0x28>
 594:	9f 57       	subi	r25, 0x7F	; 127
 596:	98 f0       	brcs	.+38     	; 0x5be <__fixunssfsi+0x30>
 598:	b9 2f       	mov	r27, r25
 59a:	99 27       	eor	r25, r25
 59c:	b7 51       	subi	r27, 0x17	; 23
 59e:	b0 f0       	brcs	.+44     	; 0x5cc <__fixunssfsi+0x3e>
 5a0:	e1 f0       	breq	.+56     	; 0x5da <__fixunssfsi+0x4c>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	1a f0       	brmi	.+6      	; 0x5b2 <__fixunssfsi+0x24>
 5ac:	ba 95       	dec	r27
 5ae:	c9 f7       	brne	.-14     	; 0x5a2 <__fixunssfsi+0x14>
 5b0:	14 c0       	rjmp	.+40     	; 0x5da <__fixunssfsi+0x4c>
 5b2:	b1 30       	cpi	r27, 0x01	; 1
 5b4:	91 f0       	breq	.+36     	; 0x5da <__fixunssfsi+0x4c>
 5b6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_zero>
 5ba:	b1 e0       	ldi	r27, 0x01	; 1
 5bc:	08 95       	ret
 5be:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_zero>
 5c2:	67 2f       	mov	r22, r23
 5c4:	78 2f       	mov	r23, r24
 5c6:	88 27       	eor	r24, r24
 5c8:	b8 5f       	subi	r27, 0xF8	; 248
 5ca:	39 f0       	breq	.+14     	; 0x5da <__fixunssfsi+0x4c>
 5cc:	b9 3f       	cpi	r27, 0xF9	; 249
 5ce:	cc f3       	brlt	.-14     	; 0x5c2 <__fixunssfsi+0x34>
 5d0:	86 95       	lsr	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b3 95       	inc	r27
 5d8:	d9 f7       	brne	.-10     	; 0x5d0 <__fixunssfsi+0x42>
 5da:	3e f4       	brtc	.+14     	; 0x5ea <__fixunssfsi+0x5c>
 5dc:	90 95       	com	r25
 5de:	80 95       	com	r24
 5e0:	70 95       	com	r23
 5e2:	61 95       	neg	r22
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	8f 4f       	sbci	r24, 0xFF	; 255
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	08 95       	ret

000005ec <__floatunsisf>:
 5ec:	e8 94       	clt
 5ee:	09 c0       	rjmp	.+18     	; 0x602 <__floatsisf+0x12>

000005f0 <__floatsisf>:
 5f0:	97 fb       	bst	r25, 7
 5f2:	3e f4       	brtc	.+14     	; 0x602 <__floatsisf+0x12>
 5f4:	90 95       	com	r25
 5f6:	80 95       	com	r24
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	8f 4f       	sbci	r24, 0xFF	; 255
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	99 23       	and	r25, r25
 604:	a9 f0       	breq	.+42     	; 0x630 <__floatsisf+0x40>
 606:	f9 2f       	mov	r31, r25
 608:	96 e9       	ldi	r25, 0x96	; 150
 60a:	bb 27       	eor	r27, r27
 60c:	93 95       	inc	r25
 60e:	f6 95       	lsr	r31
 610:	87 95       	ror	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	f1 11       	cpse	r31, r1
 61a:	f8 cf       	rjmp	.-16     	; 0x60c <__floatsisf+0x1c>
 61c:	fa f4       	brpl	.+62     	; 0x65c <__floatsisf+0x6c>
 61e:	bb 0f       	add	r27, r27
 620:	11 f4       	brne	.+4      	; 0x626 <__floatsisf+0x36>
 622:	60 ff       	sbrs	r22, 0
 624:	1b c0       	rjmp	.+54     	; 0x65c <__floatsisf+0x6c>
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	16 c0       	rjmp	.+44     	; 0x65c <__floatsisf+0x6c>
 630:	88 23       	and	r24, r24
 632:	11 f0       	breq	.+4      	; 0x638 <__floatsisf+0x48>
 634:	96 e9       	ldi	r25, 0x96	; 150
 636:	11 c0       	rjmp	.+34     	; 0x65a <__floatsisf+0x6a>
 638:	77 23       	and	r23, r23
 63a:	21 f0       	breq	.+8      	; 0x644 <__floatsisf+0x54>
 63c:	9e e8       	ldi	r25, 0x8E	; 142
 63e:	87 2f       	mov	r24, r23
 640:	76 2f       	mov	r23, r22
 642:	05 c0       	rjmp	.+10     	; 0x64e <__floatsisf+0x5e>
 644:	66 23       	and	r22, r22
 646:	71 f0       	breq	.+28     	; 0x664 <__floatsisf+0x74>
 648:	96 e8       	ldi	r25, 0x86	; 134
 64a:	86 2f       	mov	r24, r22
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	2a f0       	brmi	.+10     	; 0x65c <__floatsisf+0x6c>
 652:	9a 95       	dec	r25
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	da f7       	brpl	.-10     	; 0x652 <__floatsisf+0x62>
 65c:	88 0f       	add	r24, r24
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	97 f9       	bld	r25, 7
 664:	08 95       	ret

00000666 <__fp_inf>:
 666:	97 f9       	bld	r25, 7
 668:	9f 67       	ori	r25, 0x7F	; 127
 66a:	80 e8       	ldi	r24, 0x80	; 128
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	08 95       	ret

00000672 <__fp_nan>:
 672:	9f ef       	ldi	r25, 0xFF	; 255
 674:	80 ec       	ldi	r24, 0xC0	; 192
 676:	08 95       	ret

00000678 <__fp_pscA>:
 678:	00 24       	eor	r0, r0
 67a:	0a 94       	dec	r0
 67c:	16 16       	cp	r1, r22
 67e:	17 06       	cpc	r1, r23
 680:	18 06       	cpc	r1, r24
 682:	09 06       	cpc	r0, r25
 684:	08 95       	ret

00000686 <__fp_pscB>:
 686:	00 24       	eor	r0, r0
 688:	0a 94       	dec	r0
 68a:	12 16       	cp	r1, r18
 68c:	13 06       	cpc	r1, r19
 68e:	14 06       	cpc	r1, r20
 690:	05 06       	cpc	r0, r21
 692:	08 95       	ret

00000694 <__fp_round>:
 694:	09 2e       	mov	r0, r25
 696:	03 94       	inc	r0
 698:	00 0c       	add	r0, r0
 69a:	11 f4       	brne	.+4      	; 0x6a0 <__fp_round+0xc>
 69c:	88 23       	and	r24, r24
 69e:	52 f0       	brmi	.+20     	; 0x6b4 <__fp_round+0x20>
 6a0:	bb 0f       	add	r27, r27
 6a2:	40 f4       	brcc	.+16     	; 0x6b4 <__fp_round+0x20>
 6a4:	bf 2b       	or	r27, r31
 6a6:	11 f4       	brne	.+4      	; 0x6ac <__fp_round+0x18>
 6a8:	60 ff       	sbrs	r22, 0
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <__fp_round+0x20>
 6ac:	6f 5f       	subi	r22, 0xFF	; 255
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255
 6b0:	8f 4f       	sbci	r24, 0xFF	; 255
 6b2:	9f 4f       	sbci	r25, 0xFF	; 255
 6b4:	08 95       	ret

000006b6 <__fp_split3>:
 6b6:	57 fd       	sbrc	r21, 7
 6b8:	90 58       	subi	r25, 0x80	; 128
 6ba:	44 0f       	add	r20, r20
 6bc:	55 1f       	adc	r21, r21
 6be:	59 f0       	breq	.+22     	; 0x6d6 <__fp_splitA+0x10>
 6c0:	5f 3f       	cpi	r21, 0xFF	; 255
 6c2:	71 f0       	breq	.+28     	; 0x6e0 <__fp_splitA+0x1a>
 6c4:	47 95       	ror	r20

000006c6 <__fp_splitA>:
 6c6:	88 0f       	add	r24, r24
 6c8:	97 fb       	bst	r25, 7
 6ca:	99 1f       	adc	r25, r25
 6cc:	61 f0       	breq	.+24     	; 0x6e6 <__fp_splitA+0x20>
 6ce:	9f 3f       	cpi	r25, 0xFF	; 255
 6d0:	79 f0       	breq	.+30     	; 0x6f0 <__fp_splitA+0x2a>
 6d2:	87 95       	ror	r24
 6d4:	08 95       	ret
 6d6:	12 16       	cp	r1, r18
 6d8:	13 06       	cpc	r1, r19
 6da:	14 06       	cpc	r1, r20
 6dc:	55 1f       	adc	r21, r21
 6de:	f2 cf       	rjmp	.-28     	; 0x6c4 <__fp_split3+0xe>
 6e0:	46 95       	lsr	r20
 6e2:	f1 df       	rcall	.-30     	; 0x6c6 <__fp_splitA>
 6e4:	08 c0       	rjmp	.+16     	; 0x6f6 <__fp_splitA+0x30>
 6e6:	16 16       	cp	r1, r22
 6e8:	17 06       	cpc	r1, r23
 6ea:	18 06       	cpc	r1, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	f1 cf       	rjmp	.-30     	; 0x6d2 <__fp_splitA+0xc>
 6f0:	86 95       	lsr	r24
 6f2:	71 05       	cpc	r23, r1
 6f4:	61 05       	cpc	r22, r1
 6f6:	08 94       	sec
 6f8:	08 95       	ret

000006fa <__fp_zero>:
 6fa:	e8 94       	clt

000006fc <__fp_szero>:
 6fc:	bb 27       	eor	r27, r27
 6fe:	66 27       	eor	r22, r22
 700:	77 27       	eor	r23, r23
 702:	cb 01       	movw	r24, r22
 704:	97 f9       	bld	r25, 7
 706:	08 95       	ret

00000708 <__mulsf3>:
 708:	0e 94 97 03 	call	0x72e	; 0x72e <__mulsf3x>
 70c:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_round>
 710:	0e 94 3c 03 	call	0x678	; 0x678 <__fp_pscA>
 714:	38 f0       	brcs	.+14     	; 0x724 <__mulsf3+0x1c>
 716:	0e 94 43 03 	call	0x686	; 0x686 <__fp_pscB>
 71a:	20 f0       	brcs	.+8      	; 0x724 <__mulsf3+0x1c>
 71c:	95 23       	and	r25, r21
 71e:	11 f0       	breq	.+4      	; 0x724 <__mulsf3+0x1c>
 720:	0c 94 33 03 	jmp	0x666	; 0x666 <__fp_inf>
 724:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_nan>
 728:	11 24       	eor	r1, r1
 72a:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_szero>

0000072e <__mulsf3x>:
 72e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_split3>
 732:	70 f3       	brcs	.-36     	; 0x710 <__mulsf3+0x8>

00000734 <__mulsf3_pse>:
 734:	95 9f       	mul	r25, r21
 736:	c1 f3       	breq	.-16     	; 0x728 <__mulsf3+0x20>
 738:	95 0f       	add	r25, r21
 73a:	50 e0       	ldi	r21, 0x00	; 0
 73c:	55 1f       	adc	r21, r21
 73e:	62 9f       	mul	r22, r18
 740:	f0 01       	movw	r30, r0
 742:	72 9f       	mul	r23, r18
 744:	bb 27       	eor	r27, r27
 746:	f0 0d       	add	r31, r0
 748:	b1 1d       	adc	r27, r1
 74a:	63 9f       	mul	r22, r19
 74c:	aa 27       	eor	r26, r26
 74e:	f0 0d       	add	r31, r0
 750:	b1 1d       	adc	r27, r1
 752:	aa 1f       	adc	r26, r26
 754:	64 9f       	mul	r22, r20
 756:	66 27       	eor	r22, r22
 758:	b0 0d       	add	r27, r0
 75a:	a1 1d       	adc	r26, r1
 75c:	66 1f       	adc	r22, r22
 75e:	82 9f       	mul	r24, r18
 760:	22 27       	eor	r18, r18
 762:	b0 0d       	add	r27, r0
 764:	a1 1d       	adc	r26, r1
 766:	62 1f       	adc	r22, r18
 768:	73 9f       	mul	r23, r19
 76a:	b0 0d       	add	r27, r0
 76c:	a1 1d       	adc	r26, r1
 76e:	62 1f       	adc	r22, r18
 770:	83 9f       	mul	r24, r19
 772:	a0 0d       	add	r26, r0
 774:	61 1d       	adc	r22, r1
 776:	22 1f       	adc	r18, r18
 778:	74 9f       	mul	r23, r20
 77a:	33 27       	eor	r19, r19
 77c:	a0 0d       	add	r26, r0
 77e:	61 1d       	adc	r22, r1
 780:	23 1f       	adc	r18, r19
 782:	84 9f       	mul	r24, r20
 784:	60 0d       	add	r22, r0
 786:	21 1d       	adc	r18, r1
 788:	82 2f       	mov	r24, r18
 78a:	76 2f       	mov	r23, r22
 78c:	6a 2f       	mov	r22, r26
 78e:	11 24       	eor	r1, r1
 790:	9f 57       	subi	r25, 0x7F	; 127
 792:	50 40       	sbci	r21, 0x00	; 0
 794:	9a f0       	brmi	.+38     	; 0x7bc <__mulsf3_pse+0x88>
 796:	f1 f0       	breq	.+60     	; 0x7d4 <__mulsf3_pse+0xa0>
 798:	88 23       	and	r24, r24
 79a:	4a f0       	brmi	.+18     	; 0x7ae <__mulsf3_pse+0x7a>
 79c:	ee 0f       	add	r30, r30
 79e:	ff 1f       	adc	r31, r31
 7a0:	bb 1f       	adc	r27, r27
 7a2:	66 1f       	adc	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	91 50       	subi	r25, 0x01	; 1
 7aa:	50 40       	sbci	r21, 0x00	; 0
 7ac:	a9 f7       	brne	.-22     	; 0x798 <__mulsf3_pse+0x64>
 7ae:	9e 3f       	cpi	r25, 0xFE	; 254
 7b0:	51 05       	cpc	r21, r1
 7b2:	80 f0       	brcs	.+32     	; 0x7d4 <__mulsf3_pse+0xa0>
 7b4:	0c 94 33 03 	jmp	0x666	; 0x666 <__fp_inf>
 7b8:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_szero>
 7bc:	5f 3f       	cpi	r21, 0xFF	; 255
 7be:	e4 f3       	brlt	.-8      	; 0x7b8 <__mulsf3_pse+0x84>
 7c0:	98 3e       	cpi	r25, 0xE8	; 232
 7c2:	d4 f3       	brlt	.-12     	; 0x7b8 <__mulsf3_pse+0x84>
 7c4:	86 95       	lsr	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b7 95       	ror	r27
 7cc:	f7 95       	ror	r31
 7ce:	e7 95       	ror	r30
 7d0:	9f 5f       	subi	r25, 0xFF	; 255
 7d2:	c1 f7       	brne	.-16     	; 0x7c4 <__mulsf3_pse+0x90>
 7d4:	fe 2b       	or	r31, r30
 7d6:	88 0f       	add	r24, r24
 7d8:	91 1d       	adc	r25, r1
 7da:	96 95       	lsr	r25
 7dc:	87 95       	ror	r24
 7de:	97 f9       	bld	r25, 7
 7e0:	08 95       	ret

000007e2 <__divmodhi4>:
 7e2:	97 fb       	bst	r25, 7
 7e4:	07 2e       	mov	r0, r23
 7e6:	16 f4       	brtc	.+4      	; 0x7ec <__divmodhi4+0xa>
 7e8:	00 94       	com	r0
 7ea:	07 d0       	rcall	.+14     	; 0x7fa <__divmodhi4_neg1>
 7ec:	77 fd       	sbrc	r23, 7
 7ee:	09 d0       	rcall	.+18     	; 0x802 <__divmodhi4_neg2>
 7f0:	0e 94 05 04 	call	0x80a	; 0x80a <__udivmodhi4>
 7f4:	07 fc       	sbrc	r0, 7
 7f6:	05 d0       	rcall	.+10     	; 0x802 <__divmodhi4_neg2>
 7f8:	3e f4       	brtc	.+14     	; 0x808 <__divmodhi4_exit>

000007fa <__divmodhi4_neg1>:
 7fa:	90 95       	com	r25
 7fc:	81 95       	neg	r24
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	08 95       	ret

00000802 <__divmodhi4_neg2>:
 802:	70 95       	com	r23
 804:	61 95       	neg	r22
 806:	7f 4f       	sbci	r23, 0xFF	; 255

00000808 <__divmodhi4_exit>:
 808:	08 95       	ret

0000080a <__udivmodhi4>:
 80a:	aa 1b       	sub	r26, r26
 80c:	bb 1b       	sub	r27, r27
 80e:	51 e1       	ldi	r21, 0x11	; 17
 810:	07 c0       	rjmp	.+14     	; 0x820 <__udivmodhi4_ep>

00000812 <__udivmodhi4_loop>:
 812:	aa 1f       	adc	r26, r26
 814:	bb 1f       	adc	r27, r27
 816:	a6 17       	cp	r26, r22
 818:	b7 07       	cpc	r27, r23
 81a:	10 f0       	brcs	.+4      	; 0x820 <__udivmodhi4_ep>
 81c:	a6 1b       	sub	r26, r22
 81e:	b7 0b       	sbc	r27, r23

00000820 <__udivmodhi4_ep>:
 820:	88 1f       	adc	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	5a 95       	dec	r21
 826:	a9 f7       	brne	.-22     	; 0x812 <__udivmodhi4_loop>
 828:	80 95       	com	r24
 82a:	90 95       	com	r25
 82c:	bc 01       	movw	r22, r24
 82e:	cd 01       	movw	r24, r26
 830:	08 95       	ret

00000832 <_exit>:
 832:	f8 94       	cli

00000834 <__stop_program>:
 834:	ff cf       	rjmp	.-2      	; 0x834 <__stop_program>
